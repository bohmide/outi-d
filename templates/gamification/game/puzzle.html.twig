{% extends 'base_kids.html.twig' %}

{% block title %}Puzzle √âducatif{% endblock %}

{% block body %}
<div class="container text-center">
    <h4 class="display-3 text-primary mb-5">üß© Assemble le Puzzle ! üß©</h4>
    <p>Fais glisser les pi√®ces pour compl√©ter l'image.</p>

    <div id="puzzle-container">
        {% for piece in pieces %}
        <img src="{{ asset('uploads/puzzlePieces/' ~ piece) }}" alt="Pi√®ce {{ loop.index }}" 
             class="puzzle-piece" draggable="true" id="piece{{ loop.index }}" 
             data-correct-slot="slot{{ loop.index }}">
    {% endfor %}
    </div>

    <div id="solution-container">
        {% for piece in pieces %}
            <div class="puzzle-slot" id="slot{{ loop.index }}"></div>
        {% endfor %}
    </div>

    <p id="message"></p>
</div>
<!-- Modal de r√©ussite -->
<div class="modal fade" id="successModal" tabindex="-1" aria-labelledby="successModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content text-center">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title" id="successModalLabel">F√©licitations ! üéâ</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Bravo ! Tu as compl√©t√© le puzzle !</p>
                <img src="{{ asset('uploads/puzzleMain/' ~ finalImage )}}" class="img-fluid rounded shadow" alt="Final Image">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Fermer</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal d'erreur -->
<div class="modal fade" id="errorModal" tabindex="-1" aria-labelledby="errorModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content text-center">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="errorModalLabel">Erreur</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p><i class="bi bi-x-circle-fill"></i> Mauvais emplacement ! Essaie encore.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Fermer</button>
            </div>
        </div>
    </div>
</div>



<style>
    #puzzle-container, #solution-container {
        display: flex;
        gap: 10px;
        margin-top: 20px;
    }
    .puzzle-piece, .puzzle-slot {
        width: 100px;
        height: 100px;
        background-color: lightgray;
        border: 2px solid black;
        display: inline-block;
    }
    #solution-container {
        display: grid;
        grid-template-columns: repeat(2, 1fr); /* Deux colonnes */
        gap: 10px; /* Espacement entre les cases */
        width: max-content;
    }
    .puzzle-slot {
        width: 100px;  /* Ajuste selon tes besoins */
        height: 100px; /* Ajuste selon tes besoins */
        border: 1px solid black;
    }
    .error-message {
        font-size: 1.5rem; /* Augmente la taille du texte */
        font-weight: bold; /* Texte en gras */
        color: #d9534f; /* Rouge vif */
        background-color: #f8d7da; /* Fond rouge p√¢le */
        padding: 10px 15px; /* Un peu d'espace autour du texte */
        border-radius: 5px; /* Coins arrondis */
        border: 2px solid #d9534f; /* Bordure rouge vif */
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2); /* Ombre autour du message */
        margin-top: 10px;
        display: inline-block; /* Pour ne pas prendre toute la largeur */
        animation: shake 0.5s ease-in-out; /* Animation shake */
    }
    
    .error-message i {
        margin-right: 10px; /* Espace entre l'ic√¥ne et le texte */
        font-size: 1.3rem; /* Taille de l'ic√¥ne */
    }
    
    @keyframes shake {
        0% { transform: translateX(0); }
        25% { transform: translateX(-10px); }
        50% { transform: translateX(10px); }
        75% { transform: translateX(-10px); }
        100% { transform: translateX(0); }
    }
    
</style>

<script>
    document.addEventListener("DOMContentLoaded", function() {
        let pieces = document.querySelectorAll(".puzzle-piece");
        let slots = document.querySelectorAll(".puzzle-slot");
        let message = document.getElementById("message");
    
        // Cr√©e un tableau pour m√©moriser la position initiale des pi√®ces
        let initialPositions = [];
    
        pieces.forEach(piece => {
            // M√©morise le conteneur initial pour chaque pi√®ce
            initialPositions.push(piece.parentNode);
    
            piece.addEventListener("dragstart", function(event) {
                event.dataTransfer.setData("text", event.target.id);
            });
        });
    
        slots.forEach(slot => {
            slot.addEventListener("dragover", function(event) {
                event.preventDefault();  // Permet de d√©poser la pi√®ce dans le slot
            });
    
            slot.addEventListener("drop", function(event) {
                event.preventDefault();
    
                // R√©cup√®re l'ID de la pi√®ce
                let pieceId = event.dataTransfer.getData("text");
                let piece = document.getElementById(pieceId);
                let correctSlotId = piece.getAttribute("data-correct-slot");
    
                // Si la pi√®ce n'est pas plac√©e dans le bon slot
                if (slot.id !== correctSlotId) {
                    let errorModal = new bootstrap.Modal(document.getElementById('errorModal'));
                    errorModal.show();
    
                    // Remettre la pi√®ce √† sa place initiale apr√®s un petit d√©lai
                    setTimeout(() => {
                        let initialPosition = initialPositions[parseInt(piece.id.replace('piece', '')) - 1];
                        initialPosition.appendChild(piece);  // Remet la pi√®ce √† sa place initiale
                        piece.style.order = '';  // R√©initialise l'ordre de la pi√®ce si n√©cessaire
                    }, 1000);  // Attendre 1 seconde avant de remettre la pi√®ce √† sa place
                } else {
                    message.textContent = ''; // Effacer le message d'erreur
    
                    // Si la pi√®ce est au bon endroit, on la place dans le slot
                    slot.appendChild(piece);  // Place la pi√®ce dans le slot
                    checkWin();  // V√©rifie si le puzzle est complet
                }
            });
        });
    
        // Fonction qui v√©rifie si toutes les pi√®ces sont correctement plac√©es
        function checkWin() {
            let correct = true;
            let slots = document.querySelectorAll(".puzzle-slot");
    
            slots.forEach(slot => {
                let placedPiece = slot.firstChild;  // V√©rifie la pi√®ce plac√©e dans le slot
                if (placedPiece) {
                    let correctSlotId = placedPiece.getAttribute("data-correct-slot");
                    if (slot.id !== correctSlotId) {
                        correct = false;
                    }
                } else {
                    correct = false;
                }
            });
    
            // Si toutes les pi√®ces sont correctement plac√©es, on montre le modal de succ√®s
            if (correct) {
                let successModal = new bootstrap.Modal(document.getElementById('successModal'));
                successModal.show();
            }
        }
    });
    </script>
    
    

{% endblock %}
